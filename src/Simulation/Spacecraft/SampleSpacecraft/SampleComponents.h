/**
 * @file SampleComponents.h
 * @brief An example of user side components management installed on a spacecraft
 */

#pragma once
#include <Component/Abstract/ExpHils.h>
#include <Component/Abstract/ExpHilsI2cController.h>
#include <Component/Abstract/ExpHilsI2cTarget.h>
#include <Component/CDH/OBC.h>
#include <Component/Power/PCU.h>
#include <Dynamics/Dynamics.h>
#include <Interface/HilsInOut/HilsPortManager.h>
#include <Simulation/Spacecraft/Structure/Structure.h>

#include <Component/AOCS/InitGnssReceiver.hpp>
#include <Component/AOCS/InitGyro.hpp>
#include <Component/AOCS/InitMagSensor.hpp>
#include <Component/AOCS/InitMagTorquer.hpp>
#include <Component/AOCS/InitRwModel.hpp>
#include <Component/AOCS/InitStt.hpp>
#include <Component/AOCS/InitSunSensor.hpp>
#include <Component/CommGS/InitAntenna.hpp>
#include <Component/IdealComponents/InitializeForceGenerator.hpp>
#include <Component/Propulsion/InitSimpleThruster.hpp>
#include <Library/math/Vector.hpp>

#include "../InstalledComponents.hpp"

class OBC;
class PCU;
class Gyro;
class MagSensor;
class STT;
class SunSensor;
class GNSSReceiver;
class MagTorquer;
class RWModel;
class SimpleThruster;
class ForceGenerator;

/**
 * @class SampleComponents
 * @brief An example of user side components management class
 */
class SampleComponents : public InstalledComponents {
 public:
  /**
   * @fn SampleComponents
   * @brief Constructor
   */
  SampleComponents(const Dynamics* dynamics, const Structure* structure, const LocalEnvironment* local_env, const GlobalEnvironment* glo_env,
                   const SimulationConfig* config, ClockGenerator* clock_gen, const int sat_id);
  /**
   * @fn ~SampleComponents
   * @brief Destructor
   */
  ~SampleComponents();

  // Override functions for InstalledComponents
  /**
   * @fn GenerateForce_N_b
   * @brief Return force generated by components in unit Newton in body fixed frame
   */
  libra::Vector<3> GenerateForce_N_b();
  /**
   * @fn GenerateTorque_Nm_b
   * @brief Return torque generated by components in unit Newton-meter in body fixed frame
   */
  libra::Vector<3> GenerateTorque_Nm_b();
  /**
   * @fn LogSetup
   * @brief Setup the logger for components
   */
  void LogSetup(Logger& logger);

 private:
  PCU* pcu_;                            //!< Power Control Unit
  OBC* obc_;                            //!< Onboard Computer
  HilsPortManager* hils_port_manager_;  //!< Port manager for HILS test

  // AOCS
  Gyro* gyro_;                       //!< Gyro sensor
  MagSensor* mag_sensor_;            //!< Magnetmeter
  STT* stt_;                         //!< Star sensor
  SunSensor* sun_sensor_;            //!< Sun sensor
  GNSSReceiver* gnss_;               //!< GNSS receiver
  MagTorquer* mag_torquer_;          //!< Magnetorquer
  RWModel* rw_;                      //!< Reaction Wheel
  SimpleThruster* thruster_;         //!< Thruster
  ForceGenerator* force_generator_;  //!< Ideal Force Generator

  // CommGs
  Antenna* antenna_;

  // HILS settings examples
  /*
  ExpHils* exp_hils_uart_responder_;               //!< Example of HILS UART responder
  ExpHils* exp_hils_uart_sender_;                  //!< Example of HILS UART sender
  ExpHilsI2cController* exp_hils_i2c_controller_;  //!< Example of HILS I2C controller
  ExpHilsI2cTarget* exp_hils_i2c_target_;          //!< Example of HILS I2C target
  */

  // States
  const SimulationConfig* config_;     //!< Simulation settings
  const Dynamics* dynamics_;           //!< Dynamics information of the spacecraft
  const Structure* structure_;         //!< Structure information of the spacecraft
  const LocalEnvironment* local_env_;  //!< Local environment information around the spacecraft
  const GlobalEnvironment* glo_env_;   //!< Global environment information
};
